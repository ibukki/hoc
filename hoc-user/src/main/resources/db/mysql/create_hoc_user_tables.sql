-- create user_info table
CREATE TABLE `hoc`.`user_info` (
  `USER_ID` VARCHAR(30) NOT NULL,
  `USER_NAME` VARCHAR(45) NULL,
  `FIRST_NAME` VARCHAR(45) NULL,
  `LAST_NAME` VARCHAR(45) NULL,
  `EMAIL` VARCHAR(120) NOT NULL,
  `EXPIRATION` DATETIME NULL,
  `STATUS` TINYINT NULL,
  `CREATED_DATE` DATETIME NULL,
  `LAST_MODIFIED` DATETIME NULL,
  PRIMARY KEY (`USER_ID`),
  UNIQUE INDEX `EMAIL_UNIQUE` (`EMAIL` ASC));

-- temporary created used as foreign key of user_ee_map
CREATE TABLE `hoc`.`employee_1` (
`EMPLOYEE_ID` VARCHAR(10) NOT NULL,
`EMPLOYEE_NAME` VARCHAR(120) NULL,
PRIMARY KEY (`EMPLOYEE_ID`));

-- make sure you have employee table with the same ee id type
CREATE TABLE `hoc`.`user_ee_map` (
`USER_ID` VARCHAR(30) NOT NULL,
`EMPLOYEE_ID` VARCHAR(10) NULL,
PRIMARY KEY (`USER_ID`),
INDEX `EMPLOYEE_ID_idx` (`EMPLOYEE_ID` ASC),
CONSTRAINT `FK_USER_ID`
FOREIGN KEY (`USER_ID`)
REFERENCES `hoc`.`user_info` (`USER_ID`)
ON DELETE NO ACTION
ON UPDATE NO ACTION,
CONSTRAINT `FK_EMPLOYEE_ID`
FOREIGN KEY (`EMPLOYEE_ID`)
REFERENCES `hoc`.`employee` (`EMPLOYEE_ID`)
ON DELETE NO ACTION
ON UPDATE NO ACTION);

-- mapping user amd employee
CREATE TABLE `hoc`.`user_ee_map` (
  `USER_ID` VARCHAR(30) NOT NULL,
  `EMPLOYEE_ID` VARCHAR(10) NULL,
  PRIMARY KEY (`USER_ID`),
  INDEX `FK_EMPLOYEE_ID_idx` (`EMPLOYEE_ID` ASC),
  CONSTRAINT `FK_USER_ID`
    FOREIGN KEY (`USER_ID`)
    REFERENCES `hoc`.`user_info` (`USER_ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_EMPLOYEE_ID`
    FOREIGN KEY (`EMPLOYEE_ID`)
    REFERENCES `hoc`.`employee` (`EMPLOYEE_ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);

-- store account information like authorization and login date
CREATE TABLE `hoc`.`user_account` (
  `USER_ID` VARCHAR(30) NOT NULL,
  `ENCRYPTED_PASSWORD` VARCHAR(128) NULL,
  `PASSWORD_HASH` VARCHAR(256) NULL,
  `LAST_LOGIN_DATE` DATETIME NULL,
  `LAST_LOGIN_LOCALE` VARCHAR(45) NULL,
  `LAST_LOGIN_FAILED_DATE` DATETIME NULL,
  `PASSWORD_EXPIRATION` DATETIME NULL,
  PRIMARY KEY (`USER_ID`),
  UNIQUE INDEX `USER_ID_UNIQUE` (`USER_ID` ASC),
  CONSTRAINT `fk_user_id`
    FOREIGN KEY (`USER_ID`)
    REFERENCES `hoc`.`user_info` (`USER_ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);

-- user group
CREATE TABLE `hoc`.`user_group` (
  `USER_GROUP_ID` INT NOT NULL AUTO_INCREMENT,
  `USER_GROUP_TYPE` TINYINT NOT NULL,
  `USER_GROUP_NAME` VARCHAR(45) NOT NULL,
  `MEMBER_COUNT` INT NULL,
  `LAST_MODIFIED` DATETIME NULL,
  `PARENT_GROUP_ID` INT NULL,
  PRIMARY KEY (`USER_GROUP_ID`));

-- user role  
CREATE TABLE `hoc`.`role` (
`ROLE_ID` INT NOT NULL,
`ROLE_NAME` VARCHAR(45) NULL,
`DESCRIPTION` VARCHAR(256) NULL,
`CREATED_DATE` DATETIME NULL,
`CREATED_BY` VARCHAR(30) NULL,
`LAST_MODIFIED` DATETIME NULL,
`LAST_MODIFIED_BY` VARCHAR(30) NULL,
PRIMARY KEY (`ROLE_ID`));

-- rules are used to define the relationship of user, role and user group
CREATE TABLE `hoc`.`rule` (
`RULE_ID` INT NOT NULL,
`ROLE_ID` INT NULL,
`ACCESS_GROUP_LEVEL` INT NULL,
`TARGET_GROUP_LEVEL` INT NULL,
PRIMARY KEY (`RULE_ID`),
INDEX `FK_ROLE_ID_idx` (`ROLE_ID` ASC),
CONSTRAINT `FK_ROLE_ID`
FOREIGN KEY (`ROLE_ID`)
REFERENCES `hoc`.`role` (`ROLE_ID`)
ON DELETE NO ACTION
ON UPDATE NO ACTION);

-- mapping user with user group
CREATE TABLE `hoc`.`user_grp_map` (
  `USER_ID` VARCHAR(30) NOT NULL,
  `USER_GROUP_ID` INT NOT NULL,
  PRIMARY KEY (`USER_ID`, `USER_GROUP_ID`));

-- permission table
CREATE TABLE `hoc`.`permission` (
  `PERMISSION_ID` INT NOT NULL,
  `PERMISSION_NAME` VARCHAR(45) NOT NULL,
  `PERMISSION_TYPE` TINYINT NOT NULL,
  PRIMARY KEY (`PERMISSION_ID`),
  UNIQUE INDEX `PERMISSION_NAME_UNIQUE` (`PERMISSION_NAME` ASC));
 
-- permission group
CREATE TABLE `hoc`.`permission_group` (
  `USER_GROUP_ID` INT NOT NULL,
  `PERMISSION_ID` INT NOT NULL,
  PRIMARY KEY (`USER_GROUP_ID`, `PERMISSION_ID`));

-- mapping roles with permissions
CREATE TABLE `hoc`.`role_permission_map` (
  `PERMISSION_ID` INT NOT NULL,
  `ROLE_ID` INT NOT NULL,
  PRIMARY KEY (`PERMISSION_ID`, `ROLE_ID`));
